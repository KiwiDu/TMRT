/**
 * Part 1 Challenges
 * - Make the circle yellow
 * - Make the circle smaller by decreasing its radius
 * - Make the circle smaller by moving the camera back
 * - Make the size of the circle oscillate using the sin() function and the iTime
 *   uniform provided by shadertoy
 */

const int MAX_MARCHING_STEPS = 255;
const float MIN_DIST = 0.0;
const float MAX_DIST = 100.0;
const float EPSILON = 0.0001;

/**
 * Signed distance function for a sphere centered at the origin with radius 1.0;
 */
float sphereSDF(vec3 samplePoint, vec4 dim)
{
    return length(samplePoint - dim.xyz) - dim.w;
}

/**
 * Signed distance function describing the scene.
 *
 * Absolute value of the return value indicates the distance to the surface.
 * Sign indicates whether the point is inside or outside the surface,
 * negative indicating inside.
 */
float sceneSDF(vec3 samplePoint)
{
    vec4 d1 = vec4(-.8, 0, 0, 0.2);
    vec4 d2 = vec4(0, 0, 0, 0.2);
    vec4 d3 = vec4(0.8, 0, 0, 0.2);
    vec4 d4 = vec4(-.8, 0.8, 0, 0.2);
    vec4 d5 = vec4(0, 0.8, 0, 0.2);
    vec4 d6 = vec4(0.8, 0.8, 0, 0.2);
    vec4 d7 = vec4(-.8, -.8, 0, 0.2);
    vec4 d8 = vec4(0, -.8, 0, 0.2);
    vec4 d9 = vec4(0.8, -.8, 0, 0.2);
    return min(sphereSDF(samplePoint, d1), min(sphereSDF(samplePoint, d2), min(sphereSDF(samplePoint, d3), min(sphereSDF(samplePoint, d4), min(sphereSDF(samplePoint, d5), min(sphereSDF(samplePoint, d6), min(sphereSDF(samplePoint, d7), min(sphereSDF(samplePoint, d8), sphereSDF(samplePoint, d9)

                                                                                                                                                                                                                                                   ))))))));
}

/**
 * Return the shortest distance from the eyepoint to the scene surface along
 * the marching direction. If no part of the surface is found between start and end,
 * return end.
 *
 * eye: the eye point, acting as the origin of the ray
 * marchingDirection: the normalized direction to march in
 * start: the starting distance away from the eye
 * end: the max distance away from the ey to march before giving up
 */
float shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end)
{
    float depth = start;
    for (int i = 0; i < MAX_MARCHING_STEPS; i++)
    {
        float dist = sceneSDF(eye + depth * marchingDirection);
        if (dist < EPSILON)
        {
            return depth;
        }
        depth += dist;
        if (depth >= end)
        {
            return end;
        }
    }
    return end;
}

/**
 * Return the normalized direction to march in from the eye point for a single pixel.
 *
 * fieldOfView: vertical field of view in degrees
 * size: resolution of the output image
 * fragCoord: the x,y coordinate of the pixel in the output image
 */
vec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord)
{
    float m = min(size.x, size.y);

    vec2 xy = 2.0 * (fragCoord - size / 2.0) / m;
    float r = length(xy);
    if (r > 1.0)
        return vec3(1.0, 1.0, 1.0);

    float h = radians(90.0 - r * 90.0);

    float theta = atan(xy.y, xy.x);

    return normalize(vec3(xy, -sin(h)));
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);
    vec3 eye = vec3(0.0, 0.0, 1.0);
    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);

    if (dist > MAX_DIST - EPSILON)
    {
        // Didn't hit anything
        fragColor = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    }

    fragColor = vec4(0.5, 0.0, 0.0, 1.0);
    // fragColor = vec4(rayDirection(45.0, iResolution.xy, fragCoord), 1.0);
}